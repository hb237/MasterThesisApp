SET BLOCKCHAIN "Ethereum";;;
SET OUTPUT FOLDER "xes_files";
SET EMISSION MODE "streaming"; 
SET CONNECTION "wss://mainnet.infura.io/ws/v3/bcf5331eacae4b0c8fba1751b28c6768";

int[] kitties = newIntArray();
string logName = "cryptokitties0";

BLOCKS (6609562) (6615100) {
    LOG ENTRIES (0x06012c8cf97BEaD5deAe237070F9587f8E7A266d) (Birth(address owner, uint256 kittyId, uint256 matronId, uint256 sireId, uint256 genes)) {
        add(kitties, kittyId);
        EMIT XES EVENT (logName)(kittyId)()
            ("birth" as xs:string concept:name,
            tx.blockNumber as xs:int tx_blocknumber,
            block.timestamp as xs:int block_timestamp,
            tx.hash as xs:string tx_hash, 
            tx.from as xs:string tx_from,
            tx.to as xs:string tx_to,
            tx.success as xs:boolean tx_success, 
            tx.gasPrice as xs:int gas_price,
            tx.gasUsed as xs:int gas_used);

        bool containsMatron = contains(kitties, matronId);
        IF (containsMatron) {
            EMIT XES EVENT (logName)(matronId)()
                ("became mother" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }

        bool containsSire = contains(kitties, sireId);
        IF (containsSire) {
            EMIT XES EVENT (logName)(sireId)()
                ("became father" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }

    LOG ENTRIES (0x06012c8cf97BEaD5deAe237070F9587f8E7A266d) (Transfer(address from, address to, uint256 tokenId)) {
        bool containsKitty = contains(kitties, tokenId);
        IF (containsKitty) {
            EMIT XES EVENT (logName)(tokenId)()
                ("transferred" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }

    LOG ENTRIES (0x06012c8cf97BEaD5deAe237070F9587f8E7A266d) (Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock)) {
        bool containsMatron = contains(kitties, matronId);
        IF (containsMatron) {
            EMIT XES EVENT (logName)(matronId)()
                ("conceived as mother" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }

        bool containsSire = contains(kitties, sireId);
        IF (containsSire) {
            EMIT XES EVENT (logName)(sireId)()
                ("conceived as father" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }

    LOG ENTRIES (0xb1690c08e213a35ed9bab7b318de14420fb57d8c) (AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration)) {
        bool containsKitty = contains(kitties, tokenId);
        IF (containsKitty) {
            EMIT XES EVENT (logName)(tokenId)()
                ("put up for auction" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }

    LOG ENTRIES (0xb1690c08e213a35ed9bab7b318de14420fb57d8c) (AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner)) {
        bool containsKitty = contains(kitties, tokenId);
        IF (containsKitty) {
            EMIT XES EVENT (logName)(tokenId)()
                ("auctioned" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success,
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }

    LOG ENTRIES (0xb1690c08e213a35ed9bab7b318de14420fb57d8c) (AuctionCancelled(uint256 tokenId)) {
        bool containsKitty = contains(kitties, tokenId);
        IF (containsKitty) {
            EMIT XES EVENT (logName)(tokenId)()
                ("not auctioned" as xs:string concept:name, 
                tx.blockNumber as xs:int tx_blocknumber,
                block.timestamp as xs:int block_timestamp,
                tx.hash as xs:string tx_hash, 
                tx.from as xs:string tx_from,
                tx.to as xs:string tx_to,
                tx.success as xs:boolean tx_success, 
                tx.gasPrice as xs:int gas_price,
                tx.gasUsed as xs:int gas_used);
        }
    }
}

